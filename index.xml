<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Greeting.</title>
    <link>https://eterlan.com/</link>
    <description>Recent content on Greeting.</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 24 Nov 2019 11:28:25 +0800</lastBuildDate>
    
	<atom:link href="https://eterlan.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gcp之重建实例</title>
      <link>https://eterlan.com/posts/2019/11/gcp%E4%B9%8B%E9%87%8D%E5%BB%BA%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Sun, 24 Nov 2019 11:28:25 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/11/gcp%E4%B9%8B%E9%87%8D%E5%BB%BA%E5%AE%9E%E4%BE%8B/</guid>
      <description>GCP设置 Compute Engine - &amp;gt; VM Instance
选择任意已有的实例，选择上方的CREATE SIMILAR，搞定。
console设置 一键脚本 sudo -i wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh chmod +x shadowsocks-all.sh ./shadowsocks-all.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks-all.log 大概等待10min，运行完成之后copy服务器配置信息。
卸载命令 ./shadowsocks-all.sh uninstall 脚本命令 /etc/init.d/shadowsocks-libev start | stop | restart | status 配置文件目录 /etc/shadowsocks-libev/config.json 设置tls 打开配置文件
vi /etc/shadowsocks-libev/config.json 现在是命令模式，输入i进入编辑模式。
将最末行改成</description>
    </item>
    
    <item>
      <title>Unity Black Theme on Mac</title>
      <link>https://eterlan.com/posts/2019/06/unity-black-theme-on-mac/</link>
      <pubDate>Tue, 25 Jun 2019 12:19:30 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/unity-black-theme-on-mac/</guid>
      <description>Unity Personal Edition Black Theme on Mac
 Warning: If you are from China, your client is a special version, this might be won&amp;rsquo;t work.
 There are plenty of tutorial or Hex on Win, but few about Mac. This tutorial is for those of you using Mac while suffering from glaring white theme. and This tutorial is for Mac user, but the concept can be applied to any other platform or Unity Version.</description>
    </item>
    
    <item>
      <title>Hugo踩坑记</title>
      <link>https://eterlan.com/posts/2019/06/hugo%E8%B8%A9%E5%9D%91%E8%AE%B0/</link>
      <pubDate>Thu, 20 Jun 2019 11:28:25 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/hugo%E8%B8%A9%E5%9D%91%E8%AE%B0/</guid>
      <description>与Hexo不同，Hexo提供的 hexo g -d集生成发布于一体，而Hugo需要手动push仓库，这让我等对git不了解的同学可谓摔得鼻青脸肿。当然这也是一个很好的学习机会，洒家这就把埋地雷的地区给标记出来。
前面的安装那些流程就不多说了，教学很多，关键是几个易错的地方。
 下载好Hugo，新建存放源文件的文件夹。
hugo new site /foldername `
 从网上下载了主题后，将主题里的config.toml1复制到新建的文件夹里。注意一定要修改其中的，不然会丢失其中的
 脚本。网上的脚本千奇百怪，有每次都删除，然后重置仓库的。如果不用个人域名倒也没什么，问题是每次都清空仓库，会导致CNAME文件被删除，也就是指向个人域名的文件丢失。经过一番思考，还是使用官方脚本为妙，把public文件夹作为一个submodule，每次更新直接push到username.github.io这个仓库即可。
 添加个人域名后，由于在github操作，添加了CNAME文件，导致无法执行脚本。根本原因是submodule。submodule相当于在一个仓库里面另外储存了一个仓库。当我们在github上修改了username.github.io的时候，由于本地端与github端的hash值不同，导致push失败。解决办法其实很简单，pull下来再使用脚本即可。
# 博客中的submodule文件夹，public cd public # 先把云端的改动pull下来，也就是之前在github上添加的CNAME文件 git pull # if (之前commit失败过，那么重新commit) # git commit -m &amp;#34;After pull CNAME&amp;#34; # 回到上一级，并运行脚本 cd .. ./d.sh  成功使自定义域名指向个人博客后，如果出现一些样式的小问题，也许这样可以解决。修改config.toml文件中的canonifyURLs = false2。似乎跟https无法加载某些资源有关。
 yaml1的解析问题。key:后面必须跟1个空格，不多也不少，必须一个。汉字符号更别提了。
 额外提一下，注册域名的话.com一年只需要小几十块，相当便宜。目前正在腾讯云，还挺不错的。单纯使用国内域名注册商提供的域名，而不用服务器的话是不用备案的，只需实名认证即可。
​
  P.s. 官方的Deploy至Github Pages的教学以及d.sh脚本
GitHub User or Organization Pages
#!/bin/bash  echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34; cd blog # Build the project.</description>
    </item>
    
    <item>
      <title>ECS 单元测试教学</title>
      <link>https://eterlan.com/posts/2019/06/ecs-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%95%99%E5%AD%A6/</link>
      <pubDate>Wed, 19 Jun 2019 14:40:12 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/ecs-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%95%99%E5%AD%A6/</guid>
      <description>网上的教学视频有些过时，因此想写一个新的教学，教大家如何对自己的ECS代码进行单元测试。
第一步 打开Unity单元测试的界面 位于Window/General/TestRunner。
第二步 建立TestFolder 位于Assets/Create/Test/Test Assembly Folder
FAQ：
 为什么要用asmdef？  我们只希望测试这一小片代码，因此不希望每次测试都让unity重新编译其他部分，因此只添加几个测试需要的依赖文件，这样可以让测试跑的很快。
 为什么要勾上Test Assemblies？  这样可以在打包时忽略这块代码，范围是该文件夹以内的代码。
 为什么只勾上Editor？  因为我们只在编辑器内需要这块代码。
 写好待测试的系统system与组件component  这里待测试的是ref关键字能否作用到嵌套struct中的内容。
system using Unity.Entities; public class UpdateNestedStruct : ComponentSystem { protected override void OnUpdate() { Entities.ForEach((ref T t) =&amp;gt; { t.point.X += 1; t.forTest += 1; }); } } component using System; using Unity.Entities;[Serializable] public struct T : IComponentData { public Point point; public int forTest; } public struct Point { public int X; public int Y; } 写单元测试 准备工作 翻一翻源码，可以看到Unity自个儿的单元测试是继承自ECSTestFixture，其目的是做一些准备工作。我们也有样学样，否则的话World 和 EntityManager都是空值。</description>
    </item>
    
    <item>
      <title>GameStoryWeek2</title>
      <link>https://eterlan.com/posts/2019/06/gamestoryweek2/</link>
      <pubDate>Wed, 19 Jun 2019 14:40:12 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/gamestoryweek2/</guid>
      <description>Instruction Pick a popular story or film that you are very familiar with. You are encouraged to use the same story or film you used in the Week 1 assignment. If not, you may choose a new film or story, but pick one you need not watch again for the purposes of this assignment. For this assignment, you are asked to begin fleshing out your selected film or story into a more detailed description for a possible game.</description>
    </item>
    
    <item>
      <title>GameStoryWeek3</title>
      <link>https://eterlan.com/posts/2019/06/gamestoryweek3/</link>
      <pubDate>Wed, 19 Jun 2019 14:40:12 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/gamestoryweek3/</guid>
      <description>Review About Idea Sheets In the previous lectures, we discussed creating Idea Sheets to generate ideas and thoughts on various aspects of your game story. These lists are for you to freestyle brainstorm thoughts onto paper to commit them to words, without judgement or hesitation. The concept is to allow yourself free-form creativity and just throw these ideas, however useful they may end up being, down on paper. As you may recall, the Idea Sheets I recommend are for the following:</description>
    </item>
    
    <item>
      <title>Jane and Jack</title>
      <link>https://eterlan.com/posts/2019/06/jane-and-jack/</link>
      <pubDate>Wed, 19 Jun 2019 14:40:12 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/jane-and-jack/</guid>
      <description>Jane and Jack some thinking&amp;hellip;before the writing  no bad guys, think they have to do that. why you have to do that? robbory?killing is too much. why you have to do that? all about crime? something not allowed? illegel? thief. that&amp;rsquo;s bit better. what ? all crime? what about not moral ? that&amp;rsquo;s a lot better. why it always havr to be wrong? what about some unfortunate? or good=&amp;gt;bad=&amp;gt;good?</description>
    </item>
    
    <item>
      <title>My favourite Game - The Last of Us</title>
      <link>https://eterlan.com/posts/2019/06/my-favourite-game-the-last-of-us/</link>
      <pubDate>Wed, 19 Jun 2019 14:40:12 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/my-favourite-game-the-last-of-us/</guid>
      <description>World Design for Video Game - Week 1 Knowing what you like is a good thing. The point of this reflective assignment is to isolate and analyze the aspects of a game world that keep you playing and interested in the game.
To begin, pick one game (not a game series–just one game!) you feel strongly about. Use the title of the game as your project title. To help your peers, please include a reference URL to your game–a Wiki, an image, or the game itself.</description>
    </item>
    
    <item>
      <title>Regex Note</title>
      <link>https://eterlan.com/posts/2019/06/regex-note/</link>
      <pubDate>Wed, 19 Jun 2019 14:40:12 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/regex-note/</guid>
      <description>Regular Expression,正则表达式.历史悠久,其下又分了诸派,大同小异.今天便介绍其中最好上手的PCRE2一派. 表面都是些平常多见的字母与符号,暗地却尽是些叛徒. 主要分为:
 字母里有几个能偷偷叛变的的间谍,它们大同小异,都是匹配一些空白处的.
 \n换行 \s所有空格 \S所有非空格 \r回车  符号这边也有几个间谍,它们其中又分两个派别
 四眼仔 代表位置  ^ 我近视&amp;hellip;这一串什么玩意儿啊,我就看到了第一个. $ 我远视&amp;hellip;这一串玩意儿我就看到了最后一个.   吃货代表数量  暴食  * 我的胃口从0到无限大! + 我的胃口从1到无限大!  有节制  ? 瞧瞧你们那样儿!丢不丢人呐,我最多吃一个 ? 不仅不贪吃,还不许别人贪吃.只要它跟在另外两个暴食者后面,就会起到监督的作用,让两人见好就好. {2}俺们东北人只吃两个馒头~少了我不干~依阿伊阿伊啊~~~ {2,}窝得广东银,最少要次两过啦! {2,3}二三之间~天昏地暗~    然后就是括号啦,尽是些大佬
 ()小括号是间谍头子,要罩住自己人.括号里的兄弟我们风雨同舟!一起玩贪玩蓝月! []中括号是  最后一个 \ 它是世外高人,能帮助间谍背叛阵营,或者帮叛徒重回阵营
  </description>
    </item>
    
    <item>
      <title>Test behavior of nested struct in Unity ECS</title>
      <link>https://eterlan.com/posts/2019/06/test-behavior-of-nested-struct-in-unity-ecs/</link>
      <pubDate>Wed, 19 Jun 2019 14:40:12 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/test-behavior-of-nested-struct-in-unity-ecs/</guid>
      <description>Official ForEach test -&amp;gt; Unity.Entities.Tests/ForEach/ForEachGeneralTests.cs
Nested Struct Test using NUnit.Framework;[TestFixture] public class UpdateNestedStructTests : ECSTestsFixture {[Test] public void _0_Update_Normal_Var() { var entity = m_Manager.CreateEntity(typeof(T)); World.GetOrCreateSystem&amp;lt;UpdateNestedStruct&amp;gt;().Update(); var target = m_Manager.GetComponentData&amp;lt;T&amp;gt;(entity).forTest; Assert.AreEqual(1,target); }[Test] public void _1_Update_Nested_Struct() { var entity = m_Manager.CreateEntity(typeof(T)); World.GetOrCreateSystem&amp;lt;UpdateNestedStruct&amp;gt;().Update(); var target = m_Manager.GetComponentData&amp;lt;T&amp;gt;(entity).point.X; Assert.AreEqual(1,target); } } UpdateBufferVar Test using NUnit.Framework;[TestFixture] public class UpdateBufferVarTest : ECSTestsFixture {[Test] public void _0_Update_One_Var() { var entity = m_Manager.CreateEntity(typeof(U)); World.GetOrCreateSystem&amp;lt;UpdateBufferWithMultipleElement&amp;gt;().Update(); var target = m_Manager.</description>
    </item>
    
  </channel>
</rss>