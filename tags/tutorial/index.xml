<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Greeting.</title>
    <link>https://eterlan.com/tags/tutorial/</link>
    <description>Recent content in Tutorial on Greeting.</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 20 Jun 2019 11:28:25 +0800</lastBuildDate>
    
	<atom:link href="https://eterlan.com/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo踩坑记</title>
      <link>https://eterlan.com/posts/2019/06/hugo%E8%B8%A9%E5%9D%91%E8%AE%B0/</link>
      <pubDate>Thu, 20 Jun 2019 11:28:25 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/hugo%E8%B8%A9%E5%9D%91%E8%AE%B0/</guid>
      <description>与Hexo不同，Hexo提供的 hexo g -d集生成发布于一体，而Hugo需要手动push仓库，这让我等对git不了解的同学可谓摔得鼻青脸肿。当然这也是一个很好的学习机会，洒家这就把埋地雷的地区给标记出来。
前面的安装那些流程就不多说了，教学很多，关键是几个易错的地方。
 下载好Hugo，新建存放源文件的文件夹。
hugo new site /foldername `
 从网上下载了主题后，将主题里的config.toml1复制到新建的文件夹里。注意一定要修改其中的，不然会丢失其中的
 脚本。网上的脚本千奇百怪，有每次都删除，然后重置仓库的。如果不用个人域名倒也没什么，问题是每次都清空仓库，会导致CNAME文件被删除，也就是指向个人域名的文件丢失。经过一番思考，还是使用官方脚本为妙，把public文件夹作为一个submodule，每次更新直接push到username.github.io这个仓库即可。
 添加个人域名后，由于在github操作，添加了CNAME文件，导致无法执行脚本。根本原因是submodule。submodule相当于在一个仓库里面另外储存了一个仓库。当我们在github上修改了username.github.io的时候，由于本地端与github端的hash值不同，导致push失败。解决办法其实很简单，pull下来再使用脚本即可。
# 博客中的submodule文件夹，public cd public # 先把云端的改动pull下来，也就是之前在github上添加的CNAME文件 git pull # if (之前commit失败过，那么重新commit) # git commit -m &amp;#34;After pull CNAME&amp;#34; # 回到上一级，并运行脚本 cd .. ./d.sh  成功使自定义域名指向个人博客后，如果出现一些样式的小问题，也许这样可以解决。修改config.toml文件中的canonifyURLs = false2。似乎跟https无法加载某些资源有关。
 yaml1的解析问题。key:后面必须跟1个空格，不多也不少，必须一个。汉字符号更别提了。
 额外提一下，注册域名的话.com一年只需要小几十块，相当便宜。目前正在腾讯云，还挺不错的。单纯使用国内域名注册商提供的域名，而不用服务器的话是不用备案的，只需实名认证即可。
​
  P.s. 官方的Deploy至Github Pages的教学以及d.sh脚本
GitHub User or Organization Pages
#!/bin/bash  echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34; cd blog # Build the project.</description>
    </item>
    
    <item>
      <title>如何使用Unity ECS打造Reactive System？</title>
      <link>https://eterlan.com/posts/2019/06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8unity-ecs%E6%89%93%E9%80%A0reactive-system/</link>
      <pubDate>Wed, 19 Jun 2019 14:40:12 +0800</pubDate>
      
      <guid>https://eterlan.com/posts/2019/06/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8unity-ecs%E6%89%93%E9%80%A0reactive-system/</guid>
      <description>结构变化 所谓结构变化，即是Entity添加删除Component，诸如此类。追踪办法有两种。
1. 使用SystemStateComponent 原理 所谓State，含义是只能被手动删除的Component，在删除Entity后，依然留下做一些殿后工作，只有被指名要求删除的时候才会被删除。这种特性就让我们可以通过不同的Query去获得结构变化的消息。
栗子  假设我们有一个Entity，身上有两个组件，A：IComponentData 与 B: ISystemStateComponentData 当我们添加A组件的时候，通过Filter{ 有A无B }，我们可以在别处得知这个Entity何时被添加。在添加后手动加入B组件。 当我们删除Entity，或者移除A组件的时候，通过Filter { 有B无A }，同理可得知何时这个Entity被移除或是A组件被移除。  更具体的实现可以在查看官方对于ParentSystem的设计。
2. 查询ComponentVersion 每当出现某Component相关的结构性变化的时候，该Component的版本就会+1 。
EntityManager.GetComponentVersion() 数据变化 顾名思义。方法有三种。
1. Chunk检查 原理  GlobalSystemVersion为记录一个世界所有系统更新信息的版本号。在每一个系统更新之前，GSV++。 LastSystemVersion为系统记录自己的版本号。在某系统更新之后，它会保存GSV，含义是上次运行时的版本号，直到下次某系统更新之后，它的版本号不会更改 每一种Component，在System申请写入权限的时候，都会记录该System的LSV 获取方式为chunk.GetArch  因此，if ( ComponentVer &amp;gt; LSV ) 说明该Component被修改了（有系统获得了写入权限）。而之所以不用考虑等于，是因为除非只有1个系统，不然是不会有等于的情况的，不能理解的话可以画图思考一下。
注意这个信息时效性只有一帧，从上次该系统更新后到这次更新后的一帧，因此在这次更新中，修改Component后查询是否改变，答案是True，反之为False。
举例  系统的更新顺序为A-&amp;gt;B-&amp;gt;C-&amp;gt;A 那么GSV ：0 -&amp;gt; 1 -&amp;gt; 2 -&amp;gt; 3，每个系统更新之前+1 当数据在B系统被写入，Component就记住了B的GSV = 1 当我们在第二次轮到A系统的时候监测是否Component被改动，DidChange自动使用A系统上次的GSV记录 LSV = 0 与 Component记录的信息CV = 1做对比，发现CV &amp;gt; LSV，得知信息已经被更改了，返回True。  API chunk.</description>
    </item>
    
  </channel>
</rss>